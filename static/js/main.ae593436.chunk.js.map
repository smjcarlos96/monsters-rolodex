{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","name","alt","email","CardList","monsters","map","id","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAIaA,G,YAAO,SAAAC,GAAK,OACvB,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,KAAxC,0BAAsEC,IAAI,YAClF,6BAAKL,EAAMG,QAAQC,OACnB,4BAAIJ,EAAMG,QAAQG,aCFTC,G,MAAW,SAAAP,GAAK,OAC3B,qBAAKC,UAAU,YAAf,SACGD,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQO,WCLZC,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBAAOC,KAAK,SAASb,UAAU,SAASW,YAAaA,EAAaG,SAAUF,MCmC/DG,E,kDAhCb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXT,SAAU,GACVU,YAAa,IALH,E,gEASO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAI,EAAKC,SAAS,CAAEf,SAAUc,S,+BAGlC,IAAD,SAC2BE,KAAKP,MAA/BT,EADD,EACCA,SAAUU,EADX,EACWA,YAEZO,EAAmBjB,EAASkB,QAAO,SAAAvB,GAAO,OAC9CA,EAAQC,KAAKuB,cAAcC,SAASV,EAAYS,kBAGlD,OACE,sBAAK1B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAc,SAAAgB,GAAO,EAAKN,SAAS,CAAEL,YAAaW,EAAEC,OAAOC,WACpG,cAAC,EAAD,CAAUvB,SAAUiB,W,GA5BVO,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ae593436.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.css'\r\n\r\nexport const Card = props => (\r\n  <div className='card-container'>\r\n    <img src={`https://robohash.org/${props.monster.name}?set=set1&size=180x180`} alt='monster'/>\r\n    <h2>{props.monster.name}</h2>\r\n    <p>{props.monster.email}</p>\r\n  </div>\r\n);","import React from 'react';\r\n\r\nimport { Card } from '../card/card';\r\n\r\nimport './card-list.css';\r\n\r\nexport const CardList = props => (\r\n  <div className='card-list'>\r\n    {props.monsters.map(monster => (\r\n      <Card key={monster.id} monster={monster}/>\r\n    ))}\r\n  </div>\r\n);","import React from 'react';\r\n\r\nimport './search-box.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n  <input type='search' className='search' placeholder={placeholder} onChange={handleChange} />\r\n);\r\n","import './App.css';\nimport React, { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list';\nimport { SearchBox } from './components/search-box/search-box';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(json => this.setState({ monsters: json }));\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className='App'>\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder='search monsters' handleChange={e => { this.setState({ searchField: e.target.value }) }} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}